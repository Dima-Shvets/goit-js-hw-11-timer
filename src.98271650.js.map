{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","targetDate","selector","document","querySelector","days","hours","minutes","seconds","init","currentTime","Date","now","deltaTime","time","getTimeComponents","updateTimer","start","setInterval","pad","value","String","padStart","Math","floor","mins","secs","textContent","timer"],"mappings":";;;AA+DA,aA/DA,QAAA,oBAGA,MAAMA,EACFC,aAAY,WAACC,EAAD,SAAaC,IAChBD,KAAAA,WAAaA,EAEbC,KAAAA,SAAWC,SAASC,cAAcF,GAClCG,KAAAA,KAAO,KAAKH,SAASE,cAAc,uBACnCE,KAAAA,MAAQ,KAAKJ,SAASE,cAAc,wBACpCG,KAAAA,QAAU,KAAKL,SAASE,cAAc,uBACtCI,KAAAA,QAAU,KAAKN,SAASE,cAAc,uBAGjDK,OACQC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKZ,WAAaS,EAC9BI,EAAO,KAAKC,kBAAkBF,GAC/BG,KAAAA,YAAYF,GAGnBG,QACOR,KAAAA,OACDS,YAAY,KACFR,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKZ,WAAaS,EAG9BI,EAAO,KAAKC,kBAAkBF,GAE/BG,KAAAA,YAAYF,IAErB,KAGJK,IAAIC,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGjCP,kBAAkBD,GAQX,MAAA,CAAET,KAPI,KAAKc,IAAII,KAAKC,MAAMV,EAAQ,QAO1BR,MAND,KAAKa,IACjBI,KAAKC,MAAOV,EAAQ,MAAyB,OAKzBW,KAHT,KAAKN,IAAII,KAAKC,MAAOV,EAAQ,KAAoB,MAGlCY,KAFf,KAAKP,IAAII,KAAKC,MAAOV,EAAQ,IAAc,OAKxDE,aAAa,KAAEX,EAAF,MAAQC,EAAR,KAAemB,EAAf,KAAqBC,IAC7BrB,KAAAA,KAAKsB,YAActB,EACnBC,KAAAA,MAAMqB,YAAcrB,EACpBC,KAAAA,QAAQoB,YAAcF,EACtBjB,KAAAA,QAAQmB,YAAcD,GAI/B,MAAME,EAAQ,IAAI7B,EAAe,CAC/BG,SAAU,WACVD,WAAY,IAAIU,KAAK,kBAGvBiB,EAAMX","file":"src.98271650.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n\nclass CountdownTimer  {\n    constructor({targetDate, selector}) {\n        this.targetDate = targetDate;\n\n        this.selector = document.querySelector(selector);\n        this.days = this.selector.querySelector('[data-value=\"days\"]');\n        this.hours = this.selector.querySelector('[data-value=\"hours\"]');\n        this.minutes = this.selector.querySelector('[data-value=\"mins\"]');\n        this.seconds = this.selector.querySelector('[data-value=\"secs\"]');\n  }\n  \n  init() {\n    const currentTime = Date.now();\n    const deltaTime = this.targetDate - currentTime;\n    const time = this.getTimeComponents(deltaTime);\n    this.updateTimer(time);\n  }\n\n  start() {\n    this.init();\n        setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = this.targetDate - currentTime;\n            // console.log('deltatime', deltaTime)\n\n            const time = this.getTimeComponents(deltaTime);\n\n            this.updateTimer(time);\n        },\n        1000)\n    }\n\n    pad(value) {\n    return String(value).padStart(2, '0');\n    }\n    \n    getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs }\n    }\n    \n    updateTimer ({ days, hours, mins, secs }) {\n    this.days.textContent = days;\n    this.hours.textContent = hours;\n    this.minutes.textContent = mins;\n    this.seconds.textContent = secs;\n    }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Nov 26, 2021'),\n});\n\ntimer.start();\n\n\n\n"]}